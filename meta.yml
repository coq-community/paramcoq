---
fullname: Paramcoq
shortname: paramcoq
organization: coq-community
community: true
action: true
plugin: true
doi: 10.4230/LIPIcs.CSL.2012.381
branch: 'v9.0'

synopsis: Plugin for generating parametricity statements to perform refinement proofs

description: |-
  A Rocq plugin providing commands for generating parametricity statements.
  Typical applications of such statements are in data refinement proofs.
  Note that the plugin is still in an experimental state - it is not very user
  friendly (lack of good error messages) and still contains bugs. But it
  is usable enough to "translate" a large chunk of the standard library.

publications:
- pub_title: Parametricity in an Impredicative Sort
  pub_url: https://hal.archives-ouvertes.fr/hal-00730913/
  pub_doi: 10.4230/LIPIcs.CSL.2012.381

authors:
- name: Chantal Keller
  initial: true
- name: Marc Lasson
  initial: true
- name: Abhishek Anand
- name: Pierre Roux
- name: Emilio JesÃºs Gallego Arias
- name: Cyril Cohen
- name: Matthieu Sozeau

maintainers:
- name: Pierre Roux
  nickname: proux01

license:
  fullname: MIT License
  identifier: MIT

supported_coq_versions:
  text: >-
    The v9.0 branch supports version 9.0 of Rocq, see
    releases for compatibility with released versions of Rocq
  opam: '{>= "9.0" & < "9.1~" }'

categories:
- name: 'Miscellaneous/Rocq Extensions'

keywords:
- name: paramcoq
- name: parametricity
- name: OCaml modules

namespace: Param

opam-file-maintainer: 'Pierre Roux <pierre.roux@onera.fr>'

opam-file-version: '9.0.dev'

tested_coq_opam_versions:
- version: '9.0'

documentation: |-
  # Deprecation Notice

  Paramcoq is no longer actually maintained and released. It is only
  kept as a test case for Rocq's OCaml API. The release for Rocq 9.0
  will be the last one and is known to suffer some universe issues
  (for instance iit no longer enable to compile CoqEAL). Users are
  invited to switch to [coq-elpi](https://github.com/LPCIC/coq-elpi)
  derive.param2. One can look at
  [CoqEAL](https://github.com/coq-community/coqeal) for an example of
  porting. Main current caveat: support for mutual inductives isn't
  implemented yet.
---
